package com.example.cpjjh.threaddemo;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.widget.ImageView;

/**
 * Created by cpjjh on 31/03/16.
 */
public class Worker extends Thread {

    private Handler handler;
    private Looper looper;
    private Context context;


    public Worker(Context context) {
        this.context = context;
    }

    public static int calculateInSampleSize(
            BitmapFactory.Options options, int reqWidth, int reqHeight) {
        // Raw height and width of image
        final int height = options.outHeight;
        final int width = options.outWidth;
        int inSampleSize = 1;

        if (height > reqHeight || width > reqWidth) {

            final int halfHeight = height / 2;
            final int halfWidth = width / 2;

            // Calculate the largest inSampleSize value that is a power of 2 and keeps both
            // height and width larger than the requested height and width.
            while ((halfHeight / inSampleSize) > reqHeight
                    && (halfWidth / inSampleSize) > reqWidth) {
                inSampleSize *= 2;
            }
        }

        return inSampleSize;
    }

    public static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,
                                                         int reqWidth, int reqHeight) {

        // First decode with inJustDecodeBounds=true to check dimensions
        final BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeResource(res, resId, options);

        // Calculate inSampleSize
        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

        // Decode bitmap with inSampleSize set
        options.inJustDecodeBounds = false;
        return BitmapFactory.decodeResource(res, resId, options);
    }

    @Override
    public void run() {
        Log.i("Worker", "starting worker...");

        Looper.prepare();
        looper = Looper.myLooper();
        handler = new Handler(looper);

        Looper.loop();
    }


    public void loadResource(final ImageView imageView, final int id, final Handler runner) {
        handler.post(new Runnable() {
            @Override
            public void run() {
                Log.i("Worker", "loading resource...");
                final Bitmap bitmap = decodeSampledBitmapFromResource(context.getResources(), id, 100, 100);

                runner.post(new Runnable() {
                    @Override
                    public void run() {
                        Log.i("Worker", "setting bitmap for image view");
                        imageView.setImageBitmap(bitmap);
                    }
                });
            }
        });
    }
}
